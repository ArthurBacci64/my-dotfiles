#+TITLE: README
#+AUTHOR: Arthur Bacci

* Dependencies

The dependencies needed for this XMonad configuration:

- ~dzen2~
- ~emacs~               (can be easily changed)
- ~alacritty~           (can be easily changed)
- ~st~                  (can be easily changed)
- ~tmux~                (can be easily changed)
- ~dmenu~               (can be easily changed)
- ~xfce4-screenshooter~ (can be easily changed)
- ~flameshot~           (can be easily changed)
- ~emacs~               (can be easily changed)
- ~dunst~               (can be easily changed)
- ~stalonetray~
- ~xmobar~

* Imports

#+BEGIN_SRC haskell :tangle export.hs
import XMonad hiding ((|||))
import Data.Monoid
import Data.Tuple
import System.Exit
import XMonad.Util.Run
import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import XMonad.Layout.ResizableTile
import XMonad.Layout.BinarySpacePartition
import XMonad.Layout.Tabbed
import XMonad.Layout.TwoPane
import XMonad.Layout.Accordion
import XMonad.Layout.Spacing
import XMonad.Layout.NoBorders
import XMonad.Layout.LayoutCombinators
import XMonad.Layout.Renamed
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.DynamicLog
import XMonad.Actions.Volume
import XMonad.Util.Dzen
import XMonad.Actions.Minimize
import XMonad.Layout.Minimize
import XMonad.Actions.GridSelect
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Column
import XMonad.Layout.Grid
import XMonad.Actions.NoBorders
#+END_SRC

These are the imports, take a look at /Hackage/ to know what each one does.

* Dzen Alert Configuration

#+BEGIN_SRC haskell :tangle export.hs
alert = dzenConfig cfg1 . show . round
cfg1 = addArgs ["-xs", "1"] >=> addArgs ["-fg", "#eceff4"] >=> addArgs ["-bg", "#282a36"]
#+END_SRC

This is the setup of ~dzen~, it is used to display the volume when pressing the button to change the volume,
in order to it to work, you need to have ~dzen2~ installed.

Of course you can change ~-fg~ and ~-bg~ options to the color of your preference!

~-xs~ option is the display were it will be displayed, in the case of a single monitor setup, you don't need to declare it, do:

#+BEGIN_SRC haskell
cfg1 = addArgs ["-fg", "#eceff4"] >=> addArgs ["-bg", "#282a36"]
#+END_SRC

<<program-spawner>>
* Program Spawner

#+BEGIN_SRC haskell :tangle export.hs
spawnSelectedName :: GSConfig String -> [(String, String)] -> X ()
spawnSelectedName conf lst = gridselect conf lst >>= flip whenJust spawn
#+END_SRC

This is a function that will take a list of strings and tranform it into a grid. A example of this function being used is
the grid that appears when typing ~Mod-Ctrl-Shift-A~.

* Definitions

#+BEGIN_SRC haskell :tangle export.hs
textEditor :: String
textEditor = "emacsclient -c"

terminalEm :: String
terminalEm = "alacritty"

sencondTerminalEm :: String
sencondTerminalEm = "st"

terminalMultiplexer :: String
terminalMultiplexer = terminalEm ++ " -e fish -c 'tmux attach || tmux'"

programsMenu :: String
programsMenu = "dmenu_run"

screenshooter :: (String, String)
screenshooter = ("xfce4-screenshooter", "flameshot gui")

gridPrograms :: [(String, String)]
gridPrograms =
  [ ( "pcmanfm"      , "pcmanfm"                                   )
  , ( "brave"        , "brave"                                     )
  , ( "bitwarden"    , "bitwarden"                                 )
  , ( "ncmpcpp"      , terminalEm ++ " -e ncmpcpp"                 )
  , ( "emacs"        , terminalEm ++ " -e emacsclient -c -nw"      )
  , ( "emacs-gui"    , "emacsclient -c"                            )
  , ( "teditor"      , terminalEm ++ " -e ted"                     )
  , ( "nitrogen"     , "nitrogen"                                  )
  , ( "transmission" , "transmission-gtk"                          )
  , ( "ripcord"      , "ripcord"                                   )
  , ( "palemoon"     , "palemoon"                                  )
  , ( "luakit"       , "luakit"                                    )
  , ( "discord"      , "brave --incognito https://discord.com/app" )
  , ( "tmux"         , terminalMultiplexer                         )
  ]
#+END_SRC

The ~textEditor~ variable is the default text editor, in my case, the /Emacs/ client.

The ~terminalEm~ variable is the default terminal emulator, it will be opened with ~Mod-Shift-Enter~ and it will run the terminal-based
programs.

The ~secondTerminalEm~ variable is the alternative terminal emulator, it will be opened with ~Mod-Shift-T~.

The ~terminalMultiplexer~ variable is the default terminal multiplexer, by default, ~tmux~. It will be opened by ~Mod-Ctrl-Shift-Enter~.
~tmux attach || tmux~ means that it will try to connect to tmux and, if it returns error, then it will create a new session of tmux.

The ~programsMenu~ is the program launcher, by default, ~dmenu_run~. It is opened by ~Mod-P~

The ~screenshooter~ tuple defines two screenshooters, the first can be opened by ~PrintScreen~ and the second by ~Mod-PrintScreen~.

The ~gridPrograms~ is a list of the programs that will appear in the ~Mod-Ctrl-Shift-A~ program launcher. It is applied the [[program-spawner][function]]
that transforms it into a list of spawns.

* Keys
#+BEGIN_SRC haskell :tangle export.hs
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    [ ((modm .|. shiftMask  , xK_Return ), spawn terminalEm)
    , ((modm .|. shiftMask  , xK_t      ), spawn sencondTerminalEm)
    , ((modm .|. controlMask, xK_Return ), spawn textEditor)

    , ((modm .|. controlMask
             .|. shiftMask  , xK_Return ), spawn terminalMultiplexer)

    , ((modm .|. shiftMask
             .|. controlMask, xK_a      ), spawnSelectedName defaultGSConfig gridPrograms)

    , ((0                   , xK_Print  ), spawn $ fst screenshooter)
    , ((modm                , xK_Print  ), spawn $ snd screenshooter)

    , ((modm                , xK_p      ), spawn programsMenu)

    , ((modm .|. shiftMask  , xK_p      ), spawn "bash /home/arthur/scripts/search.sh")
    , ((modm .|. shiftMask  , xK_b      ), spawn
        "BRIGHTNESS=$(echo -ne '' | dmenu -p 'brightness:') ; xrandr --output HDMI1 --brightness $BRIGHTNESS --output VGA1 --brightness $BRIGHTNESS")
    , ((modm                , xK_s      ), spawn "echo -ne '' | dmenu | xargs xinput --set-prop 8 169 1, 0, 0, 0, 1, 0, 0, 0, ")

    , ((modm                , xK_F6     ), lowerVolume 5 >> getVolume >>= alert)
    , ((modm                , xK_F8     ), raiseVolume 5 >> getVolume >>= alert)
    , ((modm .|. shiftMask  , xK_F6     ), lowerVolume 1 >> getVolume >>= alert)
    , ((modm .|. shiftMask  , xK_F8     ), raiseVolume 1 >> getVolume >>= alert)
    , ((0                   , 0x1008FF11), lowerVolume 5 >> getVolume >>= alert)
    , ((0                   , 0x1008FF13), raiseVolume 5 >> getVolume >>= alert)
    , ((shiftMask           , 0x1008FF11), lowerVolume 1 >> getVolume >>= alert)
    , ((shiftMask           , 0x1008FF13), raiseVolume 1 >> getVolume >>= alert)
 -- , ((0                   , 0x1008FF12), toggleMute >> return ())
    , ((modm                , xK_F7     ), toggleMute >> return ())

    , ((modm .|. shiftMask  , xK_c      ), kill)

    , ((modm                , xK_space  ), sendMessage NextLayout)
    , ((modm .|. shiftMask  , xK_space  ), setLayout $ XMonad.layoutHook conf)
    , ((modm                , xK_f      ), runSelectedAction defaultGSConfig $
        map (\x -> (x, sendMessage $ JumpToLayout x)) layoutNames)

    , ((modm                , xK_n      ), withFocused minimizeWindow)
    , ((modm .|. shiftMask  , xK_n      ), withLastMinimized maximizeWindowAndFocus)

    , ((modm                , xK_g      ), goToSelected defaultGSConfig)

    , ((modm                , xK_j      ), windows W.focusDown  )
    , ((modm                , xK_k      ), windows W.focusUp    )
    , ((modm                , xK_m      ), windows W.focusMaster)

    , ((modm                , xK_Return ), windows W.swapMaster)
    , ((modm .|. shiftMask  , xK_j      ), windows W.swapDown  )
    , ((modm .|. shiftMask  , xK_k      ), windows W.swapUp    )

    , ((modm                , xK_h      ), sendMessage Shrink)
    , ((modm                , xK_l      ), sendMessage Expand)
    , ((modm .|. shiftMask  , xK_h      ), sendMessage MirrorShrink)
    , ((modm .|. shiftMask  , xK_l      ), sendMessage MirrorExpand)

    , ((modm                , xK_t      ), withFocused $ windows . W.sink)

    , ((modm                , xK_comma  ), sendMessage (IncMasterN 1))
    , ((modm                , xK_period ), sendMessage (IncMasterN (-1)))

    , ((modm .|. shiftMask
             .|. controlMask, xK_q      ), io (exitWith ExitSuccess))

    , ((modm                , xK_q      ), spawn
        "xmonad --recompile; killall xmobar; killall emacs; killall dunst; killall stalonetray; xmonad --restart")

    , ((modm                , xK_u      ), incScreenSpacing 5)
    , ((modm .|. shiftMask  , xK_u      ), incWindowSpacing 5)
    , ((modm                , xK_i      ), decScreenSpacing 5)
    , ((modm .|. shiftMask  , xK_i      ), decWindowSpacing 5)
    , ((modm                , xK_o      ), setScreenSpacing (Border  0  0  0  0))
    , ((modm .|. shiftMask  , xK_o      ), setWindowSpacing (Border 10 10 10 10))

    , ((modm                , xK_b      ), withFocused toggleBorder)

    , ((modm .|. shiftMask  , xK_slash  ),
        spawn ("echo \"" ++ help ++ "\" > ~/.xmonad/help.txt && " ++ textEditor ++ " ~/.xmonad/help.txt"))
    ]

    ++

    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++
    [((modm .|. shiftMask  , xK_l      ), runSelectedAction defaultGSConfig $
        map (\x -> (show x, windows $ W.greedyView x)) (XMonad.workspaces conf))]

    ++

    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- [(xK_e, 0), (xK_w, 1)]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+END_SRC

That's the part of the code where all the keyboard keybindings are defined.

** Programs

#+BEGIN_SRC haskell
    [ ((modm .|. shiftMask  , xK_Return ), spawn terminalEm)
    , ((modm .|. shiftMask  , xK_t      ), spawn sencondTerminalEm)
    , ((modm .|. controlMask, xK_Return ), spawn textEditor)

    , ((modm .|. controlMask
             .|. shiftMask  , xK_Return ), spawn terminalMultiplexer)

    , ((modm .|. shiftMask
             .|. controlMask, xK_a      ), spawnSelectedName defaultGSConfig gridPrograms)

    , ((0                   , xK_Print  ), spawn $ fst screenshooter)
    , ((modm                , xK_Print  ), spawn $ snd screenshooter)

    , ((modm                , xK_p      ), spawn programsMenu)

    , ((modm .|. shiftMask  , xK_p      ), spawn "bash /home/arthur/scripts/search.sh")

    , ((modm .|. shiftMask  , xK_b      ), spawn
        "BRIGHTNESS=$(echo -ne '' | dmenu -p 'brightness:') ; xrandr --output HDMI1 --brightness $BRIGHTNESS --output VGA1 --brightness $BRIGHTNESS")

    , ((modm                , xK_s      ), spawn "echo -ne '' | dmenu | xargs xinput --set-prop 8 169 1, 0, 0, 0, 1, 0, 0, 0, ")

#+END_SRC

- ~Mod-Shift-RET~ opens the primary terminal emulator.
- ~Mod-Shift-T~ opens the secondary terminal emulator.
- ~Mod-Ctrl-Shift-RET~ opens the terminal multiplexer.
- ~Mod-Ctrl-Shift-A~ opens the grid program launcher.
- ~PrintScreen~ opens the primary screenshooter.
- ~Mod-PrintScreen~ opens the secondary screenshooter.
- ~Mod-P~ opens the program launcher.
- ~Mod-Shift-P~ opens a script that I will upload soon.
- ~Mod-Shift-B~ opens a script with ~dmenu~ that changes the brightness of the screen. If you use a
  single monitor setup, you will need to modify it.
- ~Mod-S~ opens a script with ~dmenu~ that changes the sensitivity of the mouse. ~1~ is the default,
  ~2~ is 1/2 sensitive, ~0.5~ is twice sensitive.

** Volume keys

#+BEGIN_SRC haskell
    , ((modm                , xK_F6     ), lowerVolume 5 >> getVolume >>= alert)
    , ((modm                , xK_F8     ), raiseVolume 5 >> getVolume >>= alert)
    , ((modm .|. shiftMask  , xK_F6     ), lowerVolume 1 >> getVolume >>= alert)
    , ((modm .|. shiftMask  , xK_F8     ), raiseVolume 1 >> getVolume >>= alert)
    , ((0                   , 0x1008FF11), lowerVolume 5 >> getVolume >>= alert)
    , ((0                   , 0x1008FF13), raiseVolume 5 >> getVolume >>= alert)
    , ((shiftMask           , 0x1008FF11), lowerVolume 1 >> getVolume >>= alert)
    , ((shiftMask           , 0x1008FF13), raiseVolume 1 >> getVolume >>= alert)
 -- , ((0                   , 0x1008FF12), toggleMute >> return ())
    , ((modm                , xK_F7     ), toggleMute >> return ())
#+END_SRC

- ~Mod-F6~ or multimedia key: decrease volume
- ~Mod-F8~ or multimedia key: increase volume
- ~Mod-Shift-F6~ or ~Mod~ plus multimedia key: decrease volume (less sensitive)
- ~Mod-Shift-F8~ or ~Mod~ plus multimedia key: increase volume (less sensitive)
- ~Mod-Shift-F7~: toggle mute

If you have a /mute/ multimedia key, feel free to uncomment the commented line.

[[https://superuser.com/questions/389737/how-do-you-make-volume-keys-and-mute-key-work-in-xmonad][What are those codes?]]

** I want to close it!

#+BEGIN_SRC haskell
    , ((modm .|. shiftMask  , xK_c      ), kill)
#+END_SRC

When pressing ~Mod-Shift-C~, it will close the focused window.

** Change layout

#+BEGIN_SRC haskell
    , ((modm                , xK_space  ), sendMessage NextLayout)
    , ((modm .|. shiftMask  , xK_space  ), setLayout $ XMonad.layoutHook conf)
    , ((modm                , xK_f      ), runSelectedAction defaultGSConfig $
        map (\x -> (x, sendMessage $ JumpToLayout x)) layoutNames)
#+END_SRC

- ~Mod-SPC~ changes to the next layout.
- ~Mod-Shift-SPC~ switches to the first layout.
- ~Mod-F~ opens a grid menu for selecting the layout.

** Minimize windows

#+BEGIN_SRC haskell
    , ((modm                , xK_n      ), withFocused minimizeWindow)
    , ((modm .|. shiftMask  , xK_n      ), withLastMinimized maximizeWindowAndFocus)
#+END_SRC

- ~Mod-N~ minimizes the focused window.
- ~Mod-Shift-N~ deminimizes the last minimized window.

** Window selector

#+BEGIN_SRC haskell
    , ((modm                , xK_g      ), goToSelected defaultGSConfig)
#+END_SRC

Open a grid for selecting a window to focus. The window can be in any workspace!

** Cycle the focused window

#+BEGIN_SRC haskell
    , ((modm                , xK_j      ), windows W.focusDown  )
    , ((modm                , xK_k      ), windows W.focusUp    )
    , ((modm                , xK_m      ), windows W.focusMaster)
#+END_SRC

- ~Mod-J~ Cycle windows.
- ~Mod-K~ Cycle windows in the inverse direction.
- ~Mod-M~ Focus the master window.

** Moving windows

#+BEGIN_SRC haskell
    , ((modm                , xK_Return ), windows W.swapMaster)
    , ((modm .|. shiftMask  , xK_j      ), windows W.swapDown  )
    , ((modm .|. shiftMask  , xK_k      ), windows W.swapUp    )
#+END_SRC

- ~Mod-RET~ Moves the selected window to the master pane.
- ~Mod-Shift-J~ Moves the window down.
- ~Mod-Shift-K~ Moves the window up.

** Shrink and expand

#+BEGIN_SRC haskell
    , ((modm                , xK_h      ), sendMessage Shrink)
    , ((modm                , xK_l      ), sendMessage Expand)
    , ((modm .|. shiftMask  , xK_h      ), sendMessage MirrorShrink)
    , ((modm .|. shiftMask  , xK_l      ), sendMessage MirrorExpand)
#+END_SRC

- ~Mod-H~ Shrink the master pane.
- ~Mod-L~ Expand the master pane.
- ~Mod-Shift-H~ Shrink the selected window.
- ~Mod-Shift-L~ Expand the selected window.

** Back to tiling

#+BEGIN_SRC haskell
    , ((modm                , xK_t      ), withFocused $ windows . W.sink)
#+END_SRC

When pressing ~Mod-T~, the window goes back to the tiling mode.

** The master pane is not just one window

#+BEGIN_SRC haskell
    , ((modm                , xK_comma  ), sendMessage (IncMasterN 1))
    , ((modm                , xK_period ), sendMessage (IncMasterN (-1)))
#+END_SRC

The master pane can have more than one window, ~Mod-,~ increases the amount of
windows in the master pane and ~Mod-.~ decreases.

** I want to log out!

#+BEGIN_SRC haskell
    , ((modm .|. shiftMask
             .|. controlMask, xK_q      ), io (exitWith ExitSuccess))
#+END_SRC

When pressing ~Mod-Ctrl-Shift-Q~ the XMonad will exit.

** Recompile and restart

#+BEGIN_SRC haskell
    , ((modm                , xK_q      ), spawn
        "xmonad --recompile; killall xmobar; killall emacs; killall dunst; killall stalonetray; xmonad --restart")
#+END_SRC

Pressing ~Mod-Q~ will recompile and restart XMonad.

** Constant gaps are boring, I want to change it!

#+BEGIN_SRC haskell
    , ((modm                , xK_u      ), incScreenSpacing 5)
    , ((modm .|. shiftMask  , xK_u      ), incWindowSpacing 5)
    , ((modm                , xK_i      ), decScreenSpacing 5)
    , ((modm .|. shiftMask  , xK_i      ), decWindowSpacing 5)
    , ((modm                , xK_o      ), setScreenSpacing (Border  0  0  0  0))
    , ((modm .|. shiftMask  , xK_o      ), setWindowSpacing (Border 10 10 10 10))
#+END_SRC

- ~Mod-U~ will increase the gap in the border of the screen.
- ~Mod-I~ will decrease the gap in the border of the screen.
- ~Mod-Shift-U~ will increase the gap between the windows.
- ~Mod-Shift-I~ will decrease the gap between the windows.
- ~Mod-O~ will reset the gap in the border of the screen.
- ~Mod-Shift-O~ will reset the gap between the windows.

** Toggle the border of the focused window

#+BEGIN_SRC haskell
    , ((modm                , xK_b      ), withFocused toggleBorder)
#+END_SRC

Pressing ~Mod-B~ will toggle the border of the focused window.

** Help message

#+BEGIN_SRC haskell
    , ((modm .|. shiftMask  , xK_slash  ),
        spawn ("echo \"" ++ help ++ "\" > ~/.xmonad/help.txt && " ++ textEditor ++ " ~/.xmonad/help.txt"))
#+END_SRC

Pressing ~Mod-Shift-/~ will open the help (the help variable is declared later in the code) message in the default text editor.

** Workspaces

#+BEGIN_SRC haskell
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++
    [((modm .|. shiftMask  , xK_l      ), runSelectedAction defaultGSConfig $
        map (\x -> (show x, windows $ W.greedyView x)) (XMonad.workspaces conf))]
#+END_SRC

- Pressing ~Mod-(1-9)~ will switch to that workspace.
- Pressing ~Mod-Shift-L~ will open a grid menu to select the workspace.

** Monitors

#+BEGIN_SRC haskell
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- [(xK_e, 0), (xK_w, 1)]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+END_SRC

Pressing ~Mod-W~ and ~Mod-E~ will switch between the monitors, if you have three monitors then do

#+BEGIN_SRC haskell
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- [(xK_e, 0), (xK_w, 1), (xK_r, 2)]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+END_SRC

and so on. The number that is with the key is the number of the screen that it switches to.

* Mouse Bindings

#+BEGIN_SRC haskell :tangle export.hs
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    , ((modm, button4), (\w -> focus w >> sendMessage Shrink))
    , ((modm, button5), (\w -> focus w >> sendMessage Expand))

    , ((modm .|. shiftMask, button4), (\w -> focus w >> sendMessage MirrorShrink))
    , ((modm .|. shiftMask, button5), (\w -> focus w >> sendMessage MirrorExpand)) ]

#+END_SRC

Mouse keybings.

** Move

#+BEGIN_SRC haskell
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))
#+END_SRC

When pressing the left button (~button1~) while holding the ~Mod~ key, it will move the window.

** Shift Master

#+BEGIN_SRC haskell
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
#+END_SRC

When pressing the middle button (~button2~) while holding the ~Mod~ key, it will move the window to the master pane.

** Resize

#+BEGIN_SRC haskell
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))
#+END_SRC

When pressing the right button (~button3~) while holding the ~Mod~ key, it will resize the window.

** Shrink and Expand

#+BEGIN_SRC haskell
    , ((modm, button4), (\w -> focus w >> sendMessage Shrink))
    , ((modm, button5), (\w -> focus w >> sendMessage Expand))

    , ((modm .|. shiftMask, button4), (\w -> focus w >> sendMessage MirrorShrink))
    , ((modm .|. shiftMask, button5), (\w -> focus w >> sendMessage MirrorExpand)) ]
#+END_SRC

When pressing the up scroll (~button4~) while holding the ~Mod~ key, it will Shrink the Master Pane.

When pressing the down scroll (~button5~) while holding the ~Mod~ key, it will Expand the Master Pane.

When pressing the up scroll (~button4~) while holding ~Mod-Shift~, it will Shrink the selected window.

When pressing the down scroll (~button5~) while holding ~Mod-Shift~, it will Expand the selected window.

* Layouts

#+BEGIN_SRC haskell :tangle export.hs
layoutNames :: [String]
layoutNames =
    [ "Tiled"  , "MTiled"
    , "Three"  , "MThree"
    , "TwoPane", "MTwoPane"
    , "Grid"   , "MGrid"
    , "Column" , "MColumn"
    , "Mono"   , "Full"
    ]
myLayout = tiled ||| mirrortiled ||| three  ||| threeMirror  ||| two  ||| twoMirror
       ||| grid  ||| gridMirror  ||| column ||| columnMirror ||| mono ||| fullscreen
  where
    general2 = spacingRaw False (Border 0 0 0 0) True (Border 10 10 10 10) True

    gridTemplate   = minimize $ noBorders $ Grid
    grid           = renamed [Replace  "Grid"] $ general2 $ avoidStruts $        gridTemplate
    gridMirror     = renamed [Replace "MGrid"] $ general2 $ avoidStruts $ Mirror gridTemplate

    tiled_template = minimize $ noBorders $ ResizableTall nmaster delta ratio []
    tiled          = renamed [Replace "Tiled" ] $ general2 $ avoidStruts $        tiled_template
    mirrortiled    = renamed [Replace "MTiled"] $ general2 $ avoidStruts $ Mirror tiled_template

    fullscreen     = renamed [Replace "Full"  ] $ minimize $ noBorders $ Full

    twoTemplate    = minimize $ noBorders $ TwoPane delta ratio
    two            = renamed [Replace "TwoPane" ] $ general2 $ avoidStruts $        twoTemplate
    twoMirror      = renamed [Replace "MTwoPane"] $ general2 $ avoidStruts $ Mirror twoTemplate

    mono           = renamed [Replace "Mono"  ] $ general2 $ avoidStruts $ minimize $ noBorders $ Full

    threeTemplate  = minimize $ noBorders $ ThreeCol nmaster (delta) (ratio)
    three          = renamed [Replace "Three" ] $ general2 $ avoidStruts $        threeTemplate
    threeMirror    = renamed [Replace "MThree"] $ general2 $ avoidStruts $ Mirror threeTemplate

    columnTemplate = minimize $ noBorders $ Column 1
    column         = renamed [Replace  "Column"] $ general2 $ avoidStruts $        columnTemplate
    columnMirror   = renamed [Replace "MColumn"] $ general2 $ avoidStruts $ Mirror columnTemplate

    nmaster        = 1
    ratio          = 1/2
    delta          = 3/100
#+END_SRC

The layouts are the different modes of tiling windows, you can cycle throught the layouts with ~Mod-Space~. ~Mod

** Layout Names

#+BEGIN_SRC haskell
layoutNames :: [String]
layoutNames =
    [ "Tiled"  , "MTiled"
    , "Three"  , "MThree"
    , "TwoPane", "MTwoPane"
    , "Grid"   , "MGrid"
    , "Column" , "MColumn"
    , "Mono"   , "Full"
    ]
#+END_SRC

In order to choose the layout with ~Mod-F~, they need (probally not, but I did not found another way) to be listed in a array.
If you add a new mode, please remember to add it here, otherwise it will not be listed in ~Mod-F~. The name needs to be equal
to the name that you used in ~renamed~.

** The Layout List

This part is very simple

#+BEGIN_SRC haskell
myLayout = tiled ||| mirrortiled ||| three  ||| threeMirror  ||| two  ||| twoMirror
       ||| grid  ||| gridMirror  ||| column ||| columnMirror ||| mono ||| fullscreen
#+END_SRC

Basically, these are the /selected/ layouts, but where are they defined? In the next session.

** The Definitions

#+BEGIN_SRC haskell
  where
    general2 = spacingRaw False (Border 0 0 0 0) True (Border 10 10 10 10) True

    gridTemplate   = minimize $ noBorders $ Grid
    grid           = renamed [Replace  "Grid"] $ general2 $ avoidStruts $        gridTemplate
    gridMirror     = renamed [Replace "MGrid"] $ general2 $ avoidStruts $ Mirror gridTemplate

    tiled_template = minimize $ noBorders $ ResizableTall nmaster delta ratio []
    tiled          = renamed [Replace "Tiled" ] $ general2 $ avoidStruts $        tiled_template
    mirrortiled    = renamed [Replace "MTiled"] $ general2 $ avoidStruts $ Mirror tiled_template

    fullscreen     = renamed [Replace "Full"  ] $ minimize $ noBorders $ Full

    twoTemplate    = minimize $ noBorders $ TwoPane delta ratio
    two            = renamed [Replace "TwoPane" ] $ general2 $ avoidStruts $        twoTemplate
    twoMirror      = renamed [Replace "MTwoPane"] $ general2 $ avoidStruts $ Mirror twoTemplate

    mono           = renamed [Replace "Mono"  ] $ general2 $ avoidStruts $ minimize $ noBorders $ Full

    threeTemplate  = minimize $ noBorders $ ThreeCol nmaster (delta) (ratio)
    three          = renamed [Replace "Three" ] $ general2 $ avoidStruts $        threeTemplate
    threeMirror    = renamed [Replace "MThree"] $ general2 $ avoidStruts $ Mirror threeTemplate

    columnTemplate = minimize $ noBorders $ Column 1
    column         = renamed [Replace  "Column"] $ general2 $ avoidStruts $        columnTemplate
    columnMirror   = renamed [Replace "MColumn"] $ general2 $ avoidStruts $ Mirror columnTemplate

    nmaster        = 1
    ratio          = 1/2
    delta          = 3/100
#+END_SRC

That's where whe define the variables that we used in our layout list.

*** The Spacing

#+BEGIN_SRC haskell
    general2 = spacingRaw False (Border 0 0 0 0) True (Border 10 10 10 10) True
#+END_SRC haskell

That's a variable that corresponds to a function that will be applied to /most/ (not all) layouts.
It is the spacing between windows, some people call this /gap/.

*** The Layouts

/Most/ of the layouts are defined like this:

#+BEGIN_SRC haskell
    gridTemplate   = minimize $ noBorders $ Grid
    grid           = renamed [Replace  "Grid"] $ general2 $ avoidStruts $        gridTemplate
    gridMirror     = renamed [Replace "MGrid"] $ general2 $ avoidStruts $ Mirror gridTemplate
#+END_SRC

The template is the base of the layout.
There are two layouts made from the template: the layout and the layout mirror.

#+BEGIN_SRC haskell
    gridTemplate   = minimize $ noBorders $ Grid
    grid           = renamed [Replace  "Grid"] $ general2 $ avoidStruts $        gridTemplate
    gridMirror     = renamed [Replace "MGrid"] $ general2 $ avoidStruts $ Mirror gridTemplate

    tiled_template = minimize $ noBorders $ ResizableTall nmaster delta ratio []
    tiled          = renamed [Replace "Tiled" ] $ general2 $ avoidStruts $        tiled_template
    mirrortiled    = renamed [Replace "MTiled"] $ general2 $ avoidStruts $ Mirror tiled_template

    fullscreen     = renamed [Replace "Full"  ] $ minimize $ noBorders $ Full

    twoTemplate    = minimize $ noBorders $ TwoPane delta ratio
    two            = renamed [Replace "TwoPane" ] $ general2 $ avoidStruts $        twoTemplate
    twoMirror      = renamed [Replace "MTwoPane"] $ general2 $ avoidStruts $ Mirror twoTemplate

    mono           = renamed [Replace "Mono"  ] $ general2 $ avoidStruts $ minimize $ noBorders $ Full

    threeTemplate  = minimize $ noBorders $ ThreeCol nmaster (delta) (ratio)
    three          = renamed [Replace "Three" ] $ general2 $ avoidStruts $        threeTemplate
    threeMirror    = renamed [Replace "MThree"] $ general2 $ avoidStruts $ Mirror threeTemplate

    columnTemplate = minimize $ noBorders $ Column 1
    column         = renamed [Replace  "Column"] $ general2 $ avoidStruts $        columnTemplate
    columnMirror   = renamed [Replace "MColumn"] $ general2 $ avoidStruts $ Mirror columnTemplate
#+END_SRC

The ~minimize~ is the layout modifier that makes minimizing windows possible: to minimize, press ~Mod-N~, to undo, press ~Mod-Shift-N~.

The ~renamed [Replace ...]~ replaces the name of the layout.

~avoidStruts~ makes the windows don't overlay the bar.

*** ~nmaster~, ~ratio~ and ~delta~

#+BEGIN_SRC haskell
    nmaster        = 1
    ratio          = 1/2
    delta          = 3/100
#+END_SRC

~nmaster~ is the /default/ amount of windows in the master pane. This amount can be increased by ~Mod-,~ and
decreased by ~Mod-.~.

~ratio~ is the fraction of the screen that the master pane takes, can be increased by ~Mod-L~ and decreased
by ~Mod-H~.

~delta~ is how much ~ratio~ increases or decreases when presing ~Mod-L~ or ~Mod-H~.

* Manage Hook

#+BEGIN_SRC haskell :tangle export.hs
myManageHook = (composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , className =? "Gpick"          --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ])
#+END_SRC

This is a part of the default XMonad config. It turns the windows with the class name of ~MPlayer~, ~Gimp~ and ~Gpick~ in floating by default.

* Event Hook

#+BEGIN_SRC haskell :tangle export.hs
myEventHook = mempty
#+END_SRC

My event hook is empty.

* Startup Hook

#+BEGIN_SRC haskell :tangle export.hs
myStartupHook = do
  spawn "xrandr --output HDMI1 --primary --mode 1280x1024 --rate 60 --pos 1400x0 --output VGA1 --mode 1280x1024 --rate 60 && nitrogen --restore"
  spawn "setxkbmap br"
  spawn "xsetroot -cursor_name left_ptr"
  spawn "xset s off"
  spawn "xset s 0 0"
  spawn "xset -dpms"
  spawn "emacs --daemon"
  spawn "dunst"
  spawn "stalonetray"
#+END_SRC

The programs that will be opened when XMonad starts or is reloaded.

** XRandr

#+BEGIN_SRC haskell
  spawn "xrandr --output HDMI1 --primary --mode 1280x1024 --rate 60 --pos 1400x0 --output VGA1 --mode 1280x1024 --rate 60 && nitrogen --restore"
#+END_SRC

This is my monitor setup, if you use a single monitor, remove this line.

** Keyboard Layout

#+BEGIN_SRC haskell
  spawn "setxkbmap br"
#+END_SRC

This sets the keyboard layout to the brazilian default. If you use the english qwert keyboard, you can remove this line,
otherwise, find the right command for setting the keyboard for your layout.

** Where is my cursor?

#+BEGIN_SRC haskell
  spawn "xsetroot -cursor_name left_ptr"
#+END_SRC

This fixes a "problem": by default you cursor will only appear when you open a window and when you hover the desktop or the bar,
you cursor will probally be a X.

This sets the cursor to the Left Pointer.

** I don't want my screen to sleep!

#+BEGIN_SRC haskell
  spawn "xset s off"
  spawn "xset s 0 0"
  spawn "xset -dpms"
#+END_SRC

This is better explained in [[https://unix.stackexchange.com/a/615439/437678][this amazing answer in Unix Exchange]]. Basically, it turns off screen sleeping, if you want
your screen to sleep, feel free to remove this.

** Emacs daemon and client

#+BEGIN_SRC haskell
  spawn "emacs --daemon"
#+END_SRC

Emacs takes so long to open, because of this, I like to run a Emacs server in background and connect to it with ~emacsclient -c~.

** Notification, please!

#+BEGIN_SRC haskell
  spawn "dunst"
#+END_SRC

Dunst is a Notification server, it shows the notifications, and to do that, it needs to run in the background. If you use
a distribution that comes with a notification server running by default, feel free to remove this. [[https://wiki.archlinux.org/index.php/Desktop_notifications][More information about the topic.]]

** I want a tray!

#+BEGIN_SRC haskell
  spawn "stalonetray"
#+END_SRC

This is a tray, I need to run the tray in order to it to work. [[https://wiki.archlinux.org/index.php/Stalonetray][More information about the topic.]]

* PP

#+BEGIN_SRC haskell :tangle export.hs
myPP = def { ppCurrent         = xmobarColor "#8fbcbb" "" . wrap "<" ">"
           , ppTitle           = xmobarColor "#8fbcbb" "" . shorten 32
           , ppHiddenNoWindows = xmobarColor "#4c566a" ""
           , ppHidden          = id
           , ppUrgent          = xmobarColor "red" "yellow"
           , ppWsSep           = ""
           , ppSep             = " - " }
#+END_SRC

That's my PP configuration. The PP is the "template" for XMobar output. [[https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/XMonad-Hooks-DynamicLog.html][More information about the topic.]]

* The main, the core function

#+BEGIN_SRC haskell :tangle export.hs
main = do
  xmproc0 <- spawnPipe "xmobar -x 0 /home/arthur/.config/xmobar/xmobarrc --dock"
  xmproc1 <- spawnPipe "xmobar -x 1 /home/arthur/.config/xmobar/xmobarrc --dock"

  xmonad $ docks def {
    terminal           = terminalEm,
    focusFollowsMouse  = False,
    clickJustFocuses   = False,
    borderWidth        = 1,
    modMask            = mod4Mask,
    workspaces         = ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    normalBorderColor  = "#555555",
    focusedBorderColor = "#AAAAAA",

    keys               = myKeys,
    mouseBindings      = myMouseBindings,

    layoutHook         = myLayout,
    manageHook         = myManageHook,
    handleEventHook    = myEventHook,
    logHook            = dynamicLogWithPP $ myPP { ppOutput = \x -> hPutStrLn xmproc0 x >> hPutStrLn xmproc1 x },
    startupHook        = myStartupHook }
#+END_SRC

In any Haskell program, the ~main~ function is were the code starts.

<<xmobar-pipes>>
** XMobar Pipes

#+BEGIN_SRC haskell
  xmproc0 <- spawnPipe "xmobar -x 0 /home/arthur/.config/xmobar/xmobarrc --dock"
  xmproc1 <- spawnPipe "xmobar -x 1 /home/arthur/.config/xmobar/xmobarrc --dock"
#+END_SRC

This creates two variables, spawning two XMobars, one for each monitor. If you use a single monitor setup, I would recommend you doing:

#+BEGIN_SRC haskell
  xmproc0 <- spawnPipe "xmobar /home/arthur/.config/xmobar/xmobarrc --dock"
#+END_SRC

And in the log hook, change

#+BEGIN_SRC haskell
   logHook            = dynamicLogWithPP $ myPP { ppOutput = \x -> hPutStrLn xmproc0 x >> hPutStrLn xmproc1 x },
#+END_SRC

to

#+BEGIN_SRC haskell
   logHook            = dynamicLogWithPP $ myPP { ppOutput = \x -> hPutStrLn xmproc0 x },
#+END_SRC

By the way, remember to put you home instead of mine.

** Definitions

#+BEGIN_SRC haskell
  xmonad $ docks def {
    terminal           = terminalEm,
    focusFollowsMouse  = False,
    clickJustFocuses   = False,
    borderWidth        = 1,
    modMask            = mod4Mask,
    workspaces         = ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    normalBorderColor  = "#555555",
    focusedBorderColor = "#AAAAAA",
#+END_SRC

Here we define some options to our XMonad, their names are white as intuitive, so I will not explain.

** Keybindings

#+BEGIN_SRC haskell
    keys               = myKeys,
    mouseBindings      = myMouseBindings,
#+END_SRC

Here we just copy the keybindings that we defined soon.

** Hooks

#+BEGIN_SRC haskell
    layoutHook         = myLayout,
    manageHook         = myManageHook,
    handleEventHook    = myEventHook,
    ...
    startupHook        = myStartupHook }
#+END_SRC

We just copy the hooks.

** The log hook

    #+BEGIN_SRC haskell
    logHook            = dynamicLogWithPP $ myPP { ppOutput = \x -> hPutStrLn xmproc0 x >> hPutStrLn xmproc1 x },
    #+END_SRC haskell

    The log hook is what puts our data in XMobar (or other bar). If you use a single monitor setup, then follow [[xmobar-pipes][XMobar Pipes.]]

* The help

#+BEGIN_SRC haskell :tangle export.hs
help :: String
help = unlines
    [ "Arthur Bacci's XMonad Config"
    , ""
    , "This configuration was made using alacritty as the terminal emulator"
    , ""
    , "    Mod-S-Escape      Opens the terminal emulator"
    , "    Mod-C-S-Escape    Opens the text editor"
    , "    Mod-C-S-A         Opens the grid launcher"
    ]
#+END_SRC

This is the help file that opens when you press ~Mod-Shift-/~. How you can see, it is not complete yet, I priorized writing this that
writing the help.
